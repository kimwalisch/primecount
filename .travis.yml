# Test configuration for Travis CI. See <https://travis-ci.org/>.
language: cpp

matrix:
  include:
    - os: osx
      compiler: clang

    - os: linux
      dist: xenial
      compiler: clang

    - os: linux
      dist: xenial
      addons:
        apt:
          packages:
            - g++-5
            - g++-5-multilib
          sources: &sources
            - ubuntu-toolchain-r-test
      env:
        - COMPILERS="CC=gcc-5 && CXX=g++-5"

    - os: linux
      dist: xenial
      addons:
        apt:
          packages:
            - g++-6
            - g++-6-multilib
          sources: &sources
            - ubuntu-toolchain-r-test
      env:
        - COMPILERS="CC=gcc-6 && CXX=g++-6"

    - os: linux
      dist: xenial
      addons:
        apt:
          packages:
            - g++-7
            - g++-7-multilib
          sources: &sources
            - ubuntu-toolchain-r-test
      env:
        - COMPILERS="CC=gcc-7 && CXX=g++-7"

    - os: linux
      dist: xenial
      addons:
        apt:
          packages:
            - g++-8
            - g++-8-multilib
          sources: &sources
            - ubuntu-toolchain-r-test
      env:
        - COMPILERS="CC=gcc-8 && CXX=g++-8"

    - os: linux
      dist: xenial
      addons:
        apt:
          packages:
            - mingw-w64
      env:
        - COMPILERS="CC=x86_64-w64-mingw32-gcc-posix && CXX=x86_64-w64-mingw32-g++-posix"

env:
  global:
    - WARNING_FLAGS="-Wall -Wextra -Werror -pedantic -Wno-long-long -Wno-missing-braces"
    - CXXFLAGS="-O3 $WARNING_FLAGS"
    - SANITIZER_FLAGS="-O1 -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all -fno-omit-frame-pointer $WARNING_FLAGS"
    - OMP_NUM_THREADS=4

before_install:
  # Overwrite default CC and CXX
  - eval "${COMPILERS}"

install:
  - |
    if [ "${TRAVIS_OS_NAME}" = "linux" ]
    then
        sudo apt-get install -y g++-multilib make cmake cppcheck valgrind openmpi-bin libopenmpi-dev
    fi

script:
  - |
    if [ "$CXX" = "x86_64-w64-mingw32-g++-posix" ]
    then
        # 1) Test MinGW/GCC compilation
        mkdir build
        cd build
        cmake .. -DCMAKE_SYSTEM_NAME=Windows \
                 -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
                 -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
                 -DBUILD_TESTS=ON
        make -j4 VERBOSE=1

    elif [ "${TRAVIS_OS_NAME}" = "linux" ]
    then
        # 1) Static analysis using cppcheck
        cppcheck src include test \
                 -itest/generate_pi.cpp \
                 -itest/pi_table.cpp \
                 --error-exitcode=1

        # 2) Run test suite
        mkdir build
        cd build
        if [ "${CXX:0:3}" = "g++" ]
        then
            cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                     -DBUILD_TESTS=ON
        fi
        if [ "$CXX" = "clang++" ]
        then
            cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                     -DBUILD_TESTS=ON \
                     -DWITH_OPENMP=OFF
        fi
        make -j4
        make test

        # 3) Print primecount shared library dependencies
        ldd primecount

        # 4) Run builtin tests
        ./primecount --test

        # 5) Find runtime memory errors
        valgrind --error-exitcode=1 ./primecount 1e13 --gourdon
        valgrind --error-exitcode=1 ./primecount 1e13 --deleglise_rivat
        valgrind --error-exitcode=1 ./primecount 1e12 --nthprime
        valgrind --error-exitcode=1 ./primecount 1e11 --lehmer
        valgrind --error-exitcode=1 ./primecount 1e10 --lmo3

        # 6) Test primecount MPI
        cd ..
        rm -rf build
        mkdir build
        cd build
        if [ "${CXX:0:3}" = "g++" ]
        then
            cmake .. -DCMAKE_CXX_FLAGS="$CXXFLAGS -Wno-literal-suffix -Wno-strict-aliasing" \
                     -DWITH_MPI=ON
        fi
        if [ "$CXX" = "clang++" ]
        then
            cmake .. -DWITH_MPI=ON \
                     -DWITH_OPENMP=OFF
        fi
        make -j4
        mpiexec -n 4 ./primecount 1e14 -t1 | grep 3204941750802

        # 7) Test 32-bit
        cd ..
        rm -rf build
        mkdir build
        cd build
        cmake .. -DCMAKE_CXX_FLAGS="$CXXFLAGS -m32 -Wno-long-long" \
                 -DBUILD_TESTS=ON
        make -j4 VERBOSE=1
        make test

    elif [ "${TRAVIS_OS_NAME}" = "osx" ]
    then
        # Workaround for Clang/macOS bug
        # .../XcodeDefault.xctoolchain/usr/include/c++/v1/algorithm:3117:45:
        # runtime error: signed integer overflow: 
        # 0x7fffffffffffffffffffffffffffffff + 1 cannot be represented in type '__int128'
        rm test/fast_div.cpp

        # 1) Build using GNU make
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug \
                 -DCMAKE_CXX_FLAGS="$SANITIZER_FLAGS" \
                 -DBUILD_SHARED_LIBS=OFF \
                 -DBUILD_TESTS=ON
        make -j4 VERBOSE=1

        # 2) Run test suite (using sanitizers)
        make test

        # 3) Run builtin tests (using sanitizers)
        ./primecount --test
    fi
